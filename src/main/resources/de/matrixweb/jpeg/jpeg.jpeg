// -----------------------------------------------------------------------------
// 
// The JPEG grammar
// 
// -----------------------------------------------------------------------------
// 
// This is the main entry point into the JPEG grammar.
// 
JPEG :
  ((Rule | Comment) WS*)+ EOI
;

// -----------------------------------------------------------------------------

Rule :
  RuleName WS* RuleReturns? WS* ':' WS* Body WS* ';' WS*
;

RuleReturns :
  'returns' WS* ReturnTypeName
;

ReturnTypeName :
  FQTN
;

// -----------------------------------------------------------------------------

RuleName :
  value=ID
;

// -----------------------------------------------------------------------------

Body :
  (ChoiceExpression WS*)+
;

// -----------------------------------------------------------------------------

ChoiceExpression :
  SequenceExpression ('|' WS* SequenceExpression)*
;

// -----------------------------------------------------------------------------

SequenceExpression :
  (
    (
      AndPredicateExpression
      | NotPredicateExpression
      | OneOrMoreExpression
      | ZeroOrMoreExpression
      | OptionalExpression
      | AtomicExpression
    )
    WS*
  )+
;

// -----------------------------------------------------------------------------

AndPredicateExpression :
  '&' WS* AtomicExpression
;

// -----------------------------------------------------------------------------

NotPredicateExpression :
  '!' WS* AtomicExpression
;

// -----------------------------------------------------------------------------

OneOrMoreExpression :
  AtomicExpression WS* '+'
;

// -----------------------------------------------------------------------------

ZeroOrMoreExpression :
  AtomicExpression WS* '*'
;

// -----------------------------------------------------------------------------

OptionalExpression :
  AtomicExpression WS* '?'
;

// -----------------------------------------------------------------------------

AtomicExpression :
  EndOfInputExpression
  | AssignableExpression
;

// -----------------------------------------------------------------------------

AssignableExpression :
  (ID WS* AssignOperation WS*)?
  ( SubExpression
  | RangeExpression
  | Terminal
  | AnyCharExpression
  | RuleName
  )
;
AssignOperation :
    '='
  | '+='
;

// -----------------------------------------------------------------------------

SubExpression :
  '(' WS* ChoiceExpression WS* ')'
;

// -----------------------------------------------------------------------------

RangeExpression : 
  '[' '-'? (!']'(!'-' . '-' !'-' . | !'-' .))* ']'
;

// -----------------------------------------------------------------------------

AnyCharExpression :
  '.'
;

// -----------------------------------------------------------------------------

EndOfInputExpression :
  'EOI'
;

// -----------------------------------------------------------------------------

Terminal :
  '\'' InTerminalChar? '\''
;

InTerminalChar :
  ('\\' '\'' | '\\' '\\' | !'\'' .)+
;

// -----------------------------------------------------------------------------

Comment :
  '//' (!('\r'? '\n') .)*
;

// -----------------------------------------------------------------------------

// 
// Namespaced type identifier
// 
FQTN returns String:
  name+=ID ('.' name+=ID)*
;

// 
// An ID name must start with an letter or underscore and be followed
// by letters, digits or underscores.
// 
ID returns String :
  chars+=[a-zA-Z_](chars+=[a-zA-Z0-9_])*
;

WS : ' ' | '\n' | '\t' | '\r';
