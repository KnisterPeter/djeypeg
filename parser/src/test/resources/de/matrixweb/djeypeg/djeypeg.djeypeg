// -----------------------------------------------------------------------------
// 
// The djeypeg grammar
// 
// -----------------------------------------------------------------------------

Djeypeg <- _ rules+=Rule+ EOI;
Rule <- name=ID _ ('[' _ returns=ID _ ']' _)? '<-' _ body=Body ';' _;
Body <- (expressions+=ChoiceExpression _)+;

// -- Expressions --------------------------------------------------------------

Expression <- ActionExpression
            / AndPredicateExpression
            / AnyCharExpression
            / AssignableExpression
            / ChoiceExpression
            / NotPredicateExpression
            / OneOrMoreExpression
            / OptionalExpression
            / RangeExpression
            / RuleReferenceExpression
            / SequenceExpression
            / GroupExpression
            / TerminalExpression
            / ZeroOrMoreExpression
;
ChoiceExpression[Expression] <- SequenceExpression 
                                (
                                  &'/' {ChoiceExpression.choices+=current} 
                                  ('/' _ choices+=SequenceExpression)* 
                                )?
;
SequenceExpression[Expression] <- SequenceExpressionExpressions
                                  _
                                  (
                                    &SequenceExpressionExpressions
                                    {SequenceExpression.expressions+=current}
                                    expressions+=SequenceExpressionExpressions
                                    _
                                  )*
;
SequenceExpressionExpressions[Expression] <-  ActionExpression
                                            / AndPredicateExpression
                                            / NotPredicateExpression
                                            / OneOrMoreExpression
                                            / ZeroOrMoreExpression
                                            / OptionalExpression
                                            / AssignableExpression
;
ActionExpression[Expression] <- '{' _ type=ID _ ('.' property=ID _ op=ActionOperator _ 'current' _)? '}' _;
ActionOperator <- multi?='+=' / single?='=';
AndPredicateExpression[Expression] <- '&' _ expr=AssignableExpression;
NotPredicateExpression[Expression] <- '!' _ expr=AssignableExpression;
OneOrMoreExpression[Expression] <- expr=AssignableExpression '+' _;
ZeroOrMoreExpression[Expression] <- expr=AssignableExpression '*' _;
OptionalExpression[Expression] <- expr=AssignableExpression '?' _;
AssignableExpression[Expression] <-
  (  property=ID _ op=AssignmentOperator _ expr=AssignableExpressionExpressions
  / AssignableExpressionExpressions
  )
  _
;
AssignableExpressionExpressions[Expression] <-  GroupExpression
                                              / RangeExpression
                                              / TerminalExpression
                                              / AnyCharExpression
                                              / RuleReferenceExpression
;
AssignmentOperator <- (single?='=' / multi?='+=' / bool?='?=') _;
GroupExpression[Expression] <- '(' _ expr=ChoiceExpression ')' _;
RangeExpression[Expression] <- '[' dash='-'? (!']' ranges+=(MinMaxRange / CharRange))* ']' _;
MinMaxRange <- !'-' min=. '-' !'-' max=.;
CharRange <-  '\\' char=']'
            / '\\' char='\\'
            / !'-' char=.
;
AnyCharExpression[Expression] <- char='.';
RuleReferenceExpression[Expression] <- name=ID _;
TerminalExpression[Expression] <- '\'' value=InTerminalChar? '\'' _;
InTerminalChar <- ('\\' '\'' / '\\' '\\' / !'\'' .)+;

// -- Primitives ---------------------------------------------------------------

ID <- [a-zA-Z_] [a-zA-Z0-9_]*;
EOI <- !(.);

// -- Whitespaces and Comments -------------------------------------------------

Comment <- '//' (!('\r'? '\n') .)* _;
WS <- ' ' / '\n' / '\t' / '\r';
_ <- (Comment / WS)*;
