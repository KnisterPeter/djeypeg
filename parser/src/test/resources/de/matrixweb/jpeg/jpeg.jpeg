// -----------------------------------------------------------------------------
// 
// The JPEG grammar
// 
// -----------------------------------------------------------------------------
// 
// This is the main entry point into the JPEG grammar.
// 
Jpeg :
  (rules+=Rule | Comment)+ EOI
;

// -----------------------------------------------------------------------------

Rule :
  name=ID WS* returns=RuleReturns? ':' WS* body=Body ';' WS*
;

RuleReturns :
  'returns' WS* name=ID WS*
;

// -----------------------------------------------------------------------------

Body :
  (expressions+=ChoiceExpression WS*)+
;

// -----------------------------------------------------------------------------
//
// Just syntactic common base class definition

Expression :
    ActionExpression
  | AndPredicateExpression
  | AnyCharExpression
  | AssignableExpression
  | ChoiceExpression
  | NotPredicateExpression
  | OneOrMoreExpression
  | OptionalExpression
  | RangeExpression
  | RuleReferenceExpression
  | SequenceExpression
  | SubExpression
  | TerminalExpression
  | ZeroOrMoreExpression
;

// -----------------------------------------------------------------------------

ChoiceExpression returns Expression :
  choices+=SequenceExpression ('|' WS* choices+=SequenceExpression)*
;

// -----------------------------------------------------------------------------

SequenceExpression returns Expression :
  (
    expressions+=
    (
        ActionExpression
      | AndPredicateExpression
      | NotPredicateExpression
      | OneOrMoreExpression
      | ZeroOrMoreExpression
      | OptionalExpression
      | AssignableExpression
    )
    WS*
  )+
;

// -----------------------------------------------------------------------------

ActionExpression returns Expression :
  '{' WS* (property=ID WS* op=AssignmentOperator 'current' WS* | name=ID WS*) '}'
;

// -----------------------------------------------------------------------------

AndPredicateExpression returns Expression :
  '&' WS* expr=AssignableExpression
;

// -----------------------------------------------------------------------------

NotPredicateExpression returns Expression :
  '!' WS* expr=AssignableExpression
;

// -----------------------------------------------------------------------------

OneOrMoreExpression returns Expression :
  expr=AssignableExpression '+' WS*
;

// -----------------------------------------------------------------------------

ZeroOrMoreExpression returns Expression :
  expr=AssignableExpression '*' WS*
;

// -----------------------------------------------------------------------------

OptionalExpression returns Expression :
  expr=AssignableExpression '?' WS*
;

// -----------------------------------------------------------------------------

AssignableExpression returns Expression :
  (property=ID WS* op=AssignmentOperator)?
  expr=
  ( SubExpression
  | RangeExpression
  | TerminalExpression
  | AnyCharExpression
  | RuleReferenceExpression
  )
  WS*
;

// -----------------------------------------------------------------------------

AssignmentOperator :
  (single='=' | multi='+=')
  WS*
;

// -----------------------------------------------------------------------------

SubExpression returns Expression :
  '(' WS* expr=ChoiceExpression ')' WS*
;

// -----------------------------------------------------------------------------

RangeExpression returns Expression : 
  '[' dash='-'? (!']' ranges+=(MinMaxRange | CharRange))* ']' WS*
;

MinMaxRange:
  !'-' min=. '-' !'-' max=.
;

CharRange:
    char='\\]'
  | char='\\\\'
  | !'-' char=.
;

// -----------------------------------------------------------------------------

AnyCharExpression returns Expression :
  char='.'
;

// -----------------------------------------------------------------------------

RuleReferenceExpression returns Expression :
  name=ID WS*
;

// -----------------------------------------------------------------------------

TerminalExpression returns Expression :
  '\'' value=InTerminalChar? '\'' WS*
;

InTerminalChar:
  ('\\' '\'' | '\\' '\\' | !'\'' .)+
;

// -----------------------------------------------------------------------------

Comment :
  '//' (!('\r'? '\n') .)* WS*
;

// -----------------------------------------------------------------------------

EOI:
  !(.)
;

// 
// An ID name must start with an letter or underscore and be followed
// by letters, digits or underscores.
// 
ID:
  [a-zA-Z_] [a-zA-Z0-9_]*
;

WS : 
  ' ' | '\n' | '\t' | '\r'
;
