// -----------------------------------------------------------------------------
// 
// The JPEG grammar
// 
// -----------------------------------------------------------------------------
// 
// This is the main entry point into the JPEG grammar.
// 
Jpeg :
  (rules+=Rule | Comment)+ EOI
;

// -----------------------------------------------------------------------------

Rule :
  name=ID _ returns=RuleReturns? ':' _ body=Body ';' _
;

RuleReturns :
  'returns' _ name=ID _
;

// -----------------------------------------------------------------------------

Body :
  (expressions+=ChoiceExpression _)+
;

// -----------------------------------------------------------------------------
//
// Just syntactic common base class definition

Expression :
    ActionExpression
  | AndPredicateExpression
  | AnyCharExpression
  | AssignableExpression
  | ChoiceExpression
  | NotPredicateExpression
  | OneOrMoreExpression
  | OptionalExpression
  | RangeExpression
  | RuleReferenceExpression
  | SequenceExpression
  | SubExpression
  | TerminalExpression
  | ZeroOrMoreExpression
;

// -----------------------------------------------------------------------------

ChoiceExpression returns Expression :
  SequenceExpression ( &'|' {ChoiceExpression.choices+=current} ('|' _ choices+=SequenceExpression)* )?
;

// -----------------------------------------------------------------------------

SequenceExpression returns Expression :
  Comment*
  SequenceExpressionExpressions
  (
    &SequenceExpressionExpressions
    {SequenceExpression.expressions+=current}
    Comment*
    expressions+=SequenceExpressionExpressions
    _
  )*
;

SequenceExpressionExpressions returns Expression :
    ActionExpression
  | AndPredicateExpression
  | NotPredicateExpression
  | OneOrMoreExpression
  | ZeroOrMoreExpression
  | OptionalExpression
  | AssignableExpression
;

// -----------------------------------------------------------------------------

ActionExpression returns Expression :
  '{' _ ( type=ID _ ('.' property=ID _ op=ActionOperator _ 'current' _)? ) '}' _
;

ActionOperator:
  multi?='+=' | single?='='
;

// -----------------------------------------------------------------------------

AndPredicateExpression returns Expression :
  '&' _ expr=AssignableExpression
;

// -----------------------------------------------------------------------------

NotPredicateExpression returns Expression :
  '!' _ expr=AssignableExpression
;

// -----------------------------------------------------------------------------

OneOrMoreExpression returns Expression :
  expr=AssignableExpression '+' _
;

// -----------------------------------------------------------------------------

ZeroOrMoreExpression returns Expression :
  expr=AssignableExpression '*' _
;

// -----------------------------------------------------------------------------

OptionalExpression returns Expression :
  expr=AssignableExpression '?' _
;

// -----------------------------------------------------------------------------

AssignableExpression returns Expression :
  (  property=ID _ op=AssignmentOperator _ expr=AssignableExpressionExpressions
  | AssignableExpressionExpressions
  )
  _
;

AssignableExpressionExpressions returns Expression :
    SubExpression
  | RangeExpression
  | TerminalExpression
  | AnyCharExpression
  | RuleReferenceExpression
;

// -----------------------------------------------------------------------------

AssignmentOperator :
  (single?='=' | multi?='+=' | bool?='?=')
  _
;

// -----------------------------------------------------------------------------

SubExpression returns Expression :
  '(' _ expr=ChoiceExpression ')' _
;

// -----------------------------------------------------------------------------

RangeExpression returns Expression : 
  '[' dash='-'? (!']' ranges+=(MinMaxRange | CharRange))* ']' _
;

MinMaxRange:
  !'-' min=. '-' !'-' max=.
;

CharRange:
    '\\' char=']'
  | '\\' char='\\'
  | !'-' char=.
;

// -----------------------------------------------------------------------------

AnyCharExpression returns Expression :
  char='.'
;

// -----------------------------------------------------------------------------

RuleReferenceExpression returns Expression :
  name=ID _
;

// -----------------------------------------------------------------------------

TerminalExpression returns Expression :
  '\'' value=InTerminalChar? '\'' _
;

InTerminalChar:
  ('\\' '\'' | '\\' '\\' | !'\'' .)+
;

// -----------------------------------------------------------------------------

Comment :
  '//' (!('\r'? '\n') .)* _
;

// -----------------------------------------------------------------------------

EOI:
  !(.)
;

// 
// An ID name must start with an letter or underscore and be followed
// by letters, digits or underscores.
// 
ID:
  [a-zA-Z_] [a-zA-Z0-9_]*
;

WS : 
  ' ' | '\n' | '\t' | '\r'
;
_ : 
  WS* 
;
